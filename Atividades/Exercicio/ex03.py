import statsmodels.api as sm
import matplotlib.pyplot as plt
import pandas as pd

# Dados para serem utilizados no dataframe
lista_krtv = [
    0.159996,
    0.14889672770282075,
    0.16102356635666792,
    0.16140552924824475,
    0.17574065905808914,
    0.1741480372941681,
    0.18608077554476007,
    0.17276052950634688,
    0.17634297746623037,
    0.17383076937891995,
    0.17446292058078994,
    0.18678056998217465,
    0.15256677804468868,
    0.1505630866001286,
    0.15692939898050268,
    0.1678929926895277,
    0.18045774919776597,
    0.1843082889871573,
    0.19068292844386647,
    0.18271395072489208,
    0.1838495852178964,
    0.1865445268883808,
    0.17842190700307858,
    0.17107723611049883,
    0.15018353165980264,
    0.14858125667483874,
    0.16389565381918048,
    0.17561306952869885,
    0.18798428727082797,
    0.17680108357884938,
    0.18831375602140718,
    0.1886245668899958,
    0.18089869401756256,
    0.18854635032803238,
    0.1742906578509449,
    0.17864978366980627,
    0.1566198462954932,
    0.1803064855349327,
    0.16190971456352402,
    0.16562133774205465,
    0.17966214237580602,
    0.17463249188075014,
    0.18590276472389713,
    0.19319337784490562,
    0.18346488336757025,
    0.17828174748503905,
    0.16575988537396952,
    0.17486267264606548,
    0.18585124586313448,
    0.1708816873110495,
    0.15658370131413732,
    0.16182833924651108,
    0.17777073033038254,
    0.17390828128807276,
    0.1746645880051691,
    0.18242869807327983,
    0.18053118754894634,
    0.18299158732272253,
    0.18125917360049942,
    0.1696210720448827,
    0.16944804832040597,
    0.16785163915455417,
    0.1537293047221951,
    0.15910488099744047,
    0.16123395972285598,
    0.16909786399536972,
    0.1771006103570622,
    0.18323307082169013,
    0.18585780319451065,
    0.18343206183319194,
    0.17979806897401604,
    0.17316274765195339,
    0.16995598489250902,
    0.16916297782357953,    
]

lista_naus = [
    0.905814,
    0.9019563868002788,
    0.8735621326017012,
    0.8687442531809155,
    0.8662114092865238,
    0.8808568094275735,
    0.8590072047845833,
    0.90115948825707,
    0.8947287271393745,
    0.9150215008377257,
    0.9115292754145743,
    0.8929147980819333,
    0.9098562850083332,
    0.8929638363125472,
    0.8912332893759778,
    0.8664863123996226,
    0.8689148624738078,
    0.8449696603175345,
    0.8448030547935901,
    0.8665783798914546,
    0.878653407534172,
    0.9041453799678207,
    0.9034473027341811,
    1.031353939385706,
    0.8233395677262698,
    0.7901653741295198,
    0.8581593437902243,
    0.8621454929243829,
    0.8331998599441478,
    0.8339275342931362,
    0.8541814349366517,
    0.8437499270601969,
    0.8670283753027672,
    0.8935821231624699,
    0.9009486402662166,
    0.9084881555757357,
    0.9616670065467076,
    0.89745264594575,
    0.8831937031071334,
    0.8731188456244036,
    0.8747002538132223,
    0.842029154868078,
    0.8576427278242558,
    0.8678771554964184,
    0.8758261943855208,
    0.8926630209490056,
    0.9015422094791313,
    0.9304067610771029,
    0.9112193109264385,
    0.8980365873029681,
    0.8893161649474898,
    0.8711337177792953,
    0.8682219555843856,
    0.868127591686604,
    0.8521424523363647,
    0.8429467274791954,
    0.8642076800970345,
    0.9009355719493847,
    0.9132162741877412,
    0.7700461752413842,
    0.9079002248515655,
    0.9198952124193059,
    0.8989290812952272,
    0.8940990165892221,
    0.8857787181955847,
    0.8718930183169563,
    0.8697138366316676,
    0.8763391492694199,
    0.8811932153622577,
    0.8897400004958904,
    0.9265527278832133,
    0.9398329651174836,
    0.9320374381366567,
    0.9375404289465396,
]

# Foi criado um DataFrame com as duas séries temporais
serie_final_defasagem = pd.DataFrame({'NAUS': lista_krtv, 'KRTV': lista_naus})
# Calcular a correlação com as defasagens
defasagem_dados = range(-36, 36)
correlacao_dados_final = [serie_final_defasagem['NAUS'].corr(serie_final_defasagem['KRTV'].shift(i)) for i in defasagem_dados]

# Calcula o correlograma
fig, x = plt.subplots(figsize=(10, 6))
sm.graphics.tsa.plot_acf(correlacao_dados_final, lags = defasagem_dados, ax=x)

# Adiciona a cor desejada ao grafico
sm.graphics.tsa.plot_acf(correlacao_dados_final, lags = defasagem_dados, ax=x, color='red')

# Configurações adicionais do gráfico
x.set_title('Dados de defasagem entre as Séries NAUS e KRTV')
x.set_xlabel('Defasagem ∆t')
x.set_ylabel('Correlação')

# Imprimi o grafico na tela
plt.show()
